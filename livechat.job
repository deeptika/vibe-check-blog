#!/bin/bash
#SBATCH --job-name=livechat_fetcher
#SBATCH --output=livechat_%j.out
#SBATCH --error=livechat_%j.err
#SBATCH --time=02:00:00
#SBATCH --ntasks=1
#SBATCH --mem=2G

# Load any necessary modules 
module load python

# Create Pipfile if it doesn't exist
if [ ! -f Pipfile ]; then
    touch Pipfile
    echo "[[source]]" > Pipfile
    echo "url = \"https://pypi.org/simple\"" >> Pipfile
    echo "verify_ssl = true" >> Pipfile
    echo "name = \"pypi\"" >> Pipfile
    echo "" >> Pipfile
    echo "[packages]" >> Pipfile
    echo "pytchat = \"*\"" >> Pipfile
fi

# Ensure correct permissions
chmod 644 Pipfile

# Activate pipenv environment and install pytchat
export PIPENV_VENV_IN_PROJECT=1
pipenv install pytchat

# Set variables from command-line arguments
VIDEO_ID=$1
OUTPUT_FILE=$2

# Check if both arguments are provided
if [ -z "$VIDEO_ID" ] || [ -z "$OUTPUT_FILE" ]; then
    echo "Error: Both VIDEO_ID and OUTPUT_FILE must be provided."
    echo "Usage: sbatch livechat.job VIDEO_ID OUTPUT_FILE"
    exit 1
fi

# Run the Python script within pipenv environment
pipenv run python << END
import pytchat
import time
import json
from datetime import datetime

def fetch_chat_messages(video_id, chat_file):
    chat = pytchat.create(video_id=video_id)
    print(f"Started fetching chat messages for video ID: {video_id}")
    print(f"Saving messages to: {chat_file}")
    
    try:
        while chat.is_alive():
            for c in chat.get().sync_items():
                message = {
                    "timestamp": c.datetime,
                    "author": c.author.name,
                    "message": c.message
                }
                save_message_to_json(message, chat_file)
                print(f"{message['timestamp']} - {message['author']}: {message['message']}")
            time.sleep(1)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        print(f"Chat messages saved to {chat_file}")

def save_message_to_json(message, filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(message)
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# Main execution
video_id = "$VIDEO_ID"
output_file = "$OUTPUT_FILE"
fetch_chat_messages(video_id, output_file)
END

echo "Job completed."
